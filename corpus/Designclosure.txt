design closure is the process by which a vlsi design is modified from its initial description to meet a growing list of design constraints and objectives
every step in the ic design such as static timing analysis placement routing and so on is already complex and often forms its own field of study this article however looks at the overall design closure process which takes a chip from its initial design state to the final form in which all of its design constraints are met


every chip starts off as someone’s idea of a good thing if we can make a part that performs function x we will all be rich once the concept is established someone from marketing says to make this chip profitably it must cost $c and run at frequency f someone from manufacturing says to meet this chip’s targets it must have a yield of y% someone from packaging says it must fit in the p package and dissipate no more than w watts eventually the team generates an extensive list of all the constraints and objectives they must meet to manufacture a product that can be sold profitably the management then forms a design team which consists of chip architects logic designers functional verification engineers physical designers and timing engineers and assigns them to create a chip to the specifications
the distinction between constraints and objectives is straightforward a constraint is a design target that must be met for the design to be successful for example a chip may be required to run at a specific frequency so it can interface with other components in a system in contrast an objective is a design target where more or less is better for example yield is generally an objective which is maximized to lower manufacturing cost for the purposes of design closure the distinction between constraints and objectives is not important this article uses the words interchangeably
designing a chip used to be a much simpler task in the early days of vlsi a chip consisted of a few thousand logic circuits that performed a simple function at speeds of a few mhz design closure was simple if all of the necessary circuits and wires fit the chip would perform the desired function
modern design closure has grown orders of magnitude more complex modern logic chips can have tens to hundreds of millions of logic elements switching at speeds of several ghz this improvement has been driven by moore’s law of scaling of technology and has introduced many new design considerations as a result a modern vlsi designer must consider the performance of a chip against a list of dozens of design constraints and objectives including performance power signal integrity reliability and yield in response to this growing list of constraints the design closure flow has evolved from a simple linear list of tasks to a very complex highly iterative flow such as the following simplified asic design flow
the purpose of the flow is to take a design from concept phase to working chip the complexity of the flow is a direct result of the addition and evolution of the list of design closure constraints to understand this evolution it is important to understand the life cycle of a design constraint in general design constraints influence the design flow via the following five-stage evolution
a good example of this evolution can be found in the signal integrity constraint in the mid-1990s 180 nm node industry visionaries were describing the impending dangers of coupling noise long before chips were failing by the mid-late 1990s noise problems were cropping up in advanced microprocessor designs by 2000 automated noise analysis tools were available and were used to guide manual fix-up the total number of noise problems identified by the analysis tools identified by the flow quickly became too many to correct manually in response cad companies developed the noise avoidance flows that are currently in use in the industry
at any point in time the constraints in the design flow are at different stages of their life cycle at the time of this writing for example performance optimization is the most mature and is well into the fifth phase with the widespread use of timing-driven design flows power- and defect-oriented yield optimization is well into the fourth phase power supply integrity a type of noise constraint is in the third phase circuit-limited yield optimization is in the second phase etc a list of the first-phase impending constraint crises can always be found in the international technology roadmap for semiconductors itrs 15-year-outlook technology roadmaps
as a constraint matures in the design flow it tends to work its way from the end of the flow to the beginning as it does this it also tends to increase in complexity and in the degree that it contends with other constraints constraints tend to move up in the flow due to one of the basic paradoxes of design accuracy vs influence specifically the earlier in a design flow a constraint is addressed the more flexibility there is to address the constraint ironically the earlier one is in a design flow the more difficult it is to predict compliance for example an architectural decision to pipeline a logic function can have a far greater impact on total chip performance than any amount of postrouting fix-up at the same time accurately predicting the performance impact of such a change before the chip logic is synthesized let alone placed or routed is very difficult this paradox has shaped the evolution of the design closure flow in several ways first it requires that the design flow is no longer composed of a linear set of discrete steps in the early stages of vlsi it was sufficient to break the design into discrete stages ie first do logic synthesis then do placement then do routing as the number and complexity of design closure constraints has increased the linear design flow has broken down in the past if there were too many timing constraint violations left after routing it was necessary to loop back modify the tool settings slightly and reexecute the previous placement steps if the constraints were still not met it was necessary to reach further back in the flow and modify the chip logic and repeat the synthesis and placement steps this type of looping is both time consuming and unable to guarantee convergence ie it is possible to loop back in the flow to correct one constraint violation only to find that the correction induced another unrelated violation
