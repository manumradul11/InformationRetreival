software design is the process by which an agent creates a specification of a software artifact intended to accomplish goals using a set of primitive components and subject to constraints software design may refer to either all the activities involved in conceptualizing framing implementing commissioning and ultimately modifying complex systems or the activity following requirements specification and before programming as  in a stylized software engineering process
software design usually involves problem solving and planning a software solution this includes both low-level component and algorithm design and high-level architecture design


software design is the process of implementing software solutions to one or more set of problems one of the important parts of software design is the software requirements analysis sra it is a part of the software development process that lists specifications used in software engineering if the software is semi-automated or user centered software design may involve user experience design yielding a storyboard to help determine those specifications if the software is completely automated meaning no user or user interface a software design may be as simple as a flow chart or text describing a planned sequence of events there are also semi-standard methods like unified modeling language and fundamental modeling concepts in either case some documentation of the plan is usually the product of the design furthermore a software design may be platform-independent or platform-specific depending upon the availability of the technology used for the design
software design can be considered as creating a solution to a problem in hand with available capabilities the main difference between software analysis and design is that the output of a software analysis consist of smaller problems to solve also the analysis should not be very different even if it is designed by different team members or groups the design focuses on the capabilities and there can be multiple designs for the same problem depending on the environment that solution will be hosted they can be operations systems webpages mobile or even the new cloud computing paradigm sometimes the design depends on the environment that it was developed for whether it is created from reliable frameworks or implemented with suitable design patterns
software design is both a process and a model the design process is a sequence of steps that enable the designer to describe all aspects of the software to be built it is important to note however that the design process is not simply a cookbook creative skill past experience a sense of what makes good software and an overall commitment to quality are critical success factors for a competent design the design model is the equivalent of an architect’s plans for a house it begins by representing the totality of the thing to be built eg a three-dimensional rendering of the house and slowly reﬁnes the thing to provide guidance for constructing each detail eg the plumbing layout similarly the design model that is created for software provides a variety of different views of the computer software basic design principles enable the software engineer to navigate the design process davis dav95full citation needed suggests a set of principles for software design which have been adapted and extended in the following list
the design concepts provide the software designer with a foundation from which more sophisticated methods can be applied a set of fundamental design concepts has evolved they are as follows
in his object model grady booch mentions abstraction encapsulation modularisation and hierarchy as fundamental design principles the acronym phame principles of hierarchy abstraction modularisation and encapsulation is sometimes used to refer to these four fundamental principles
there are many aspects to consider in the design of a piece of software the importance of each should reflect the goals the software is trying to achieve some of these aspects are
a modelling language is any artificial language that can be used to express information or knowledge or systems in a structure that is defined by a consistent set of rules the rules are used for interpretation of the meaning of components in the structure a modeling language can be graphical or textual examples of graphical modeling languages for software design are
a software designer or architect may identify a design problem which has been solved by others before a template or pattern describing a solution to a common problem is known as a design pattern the reuse of such patterns can speed up the software development process having been tested and proven in the past
the difficulty of using the term design in relation to software is that in some sense the source code of a program is the design for the program that it produces to the extent that this is true software design refers to the design of the design edsger w dijkstra referred to this layering of semantic levels as the radical novelty of computer programming and donald knuth used his experience writing tex to describe the futility of attempting to design a program prior to implementing it
tex would have been a complete failure if i had merely specified it and not participated fully in its initial implementation the process of implementation constantly led me to unanticipated questions and to new insights about how the original specifications could be improved
software design documentation may be reviewed or presented to allow constraints specifications and even requirements to be adjusted prior to computer programming redesign may occur after review of a programmed simulation or prototype it is possible to design software in the process of programming without a plan or requirement analysis but for more complex projects this would not be considered feasible a separate design prior to programming allows for multidisciplinary designers and subject matter experts smes to collaborate with highly skilled programmers for software that is both useful and technically sound
^roger s pressman software engineering a practitioner’s approach mcgraw-hill isbn 0-07-365578-3 
